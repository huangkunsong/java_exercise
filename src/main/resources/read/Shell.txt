cd 跳转到指定路径
-------------------------------------------------------
echo 输出字符，双引号可以使用变量,单引号不可以使用变量
    echo -e "OK \n" -e开启转译, \n换行,\c不换行
    echo '\asdasd' 单引号不进行转义 echo `date` 显示命令执行结果
    echo '内容' >  文件   将内容输出到文件
    echo `命令`  输出命令
-------------------------------------------------------
printf 输出字符,支持格式化
    printf "%-15s %-18s %-4s\n" 姓名 性别 体重
    %-15s   ->  左对齐,最少15个字符,不足用空格补充。
    %-4.2f  ->  4位数,保留2位小数,四舍五入 %s 字符
    %c 单字符
    %d 整数
    %f 浮点

-------------------------------------------------------
变量：
    a=阿瓦达   ->  变量赋值，直接使用名称赋值,不能有空格
    "${a}"  ->  使用变量,$变量名,${变量名}也可以但有些场景会异常。
    readonly a  ->  将变量a定义为只读变量,不可以修改和删除。
    unset a     ->  删除变量a
    ${#a}   ->  获取变量a的长度
    $[a*b]  ->  计算a*b的结果
    a=$(command)  将命令结果保存为变量,与a=`command`作用一样
-------------------------------------------------------
字符串截取：
    变量a="http://nkweb-a3.huawei.com/#!pm/#!pi/apply/searchContract.html"
    ${a#*#!}    ->  #表达式,*任意字符。删除a变量中左边开始第一个#!左边的字符，包含#!。
                        结果：pm/#!pi/apply/searchContract.html
    ${a##*#!}   ->  ##删除a变量中最后一个#!左边的字符,包含#!。
                        结果：pi/apply/searchContract.html
    ${a%#!*}    ->  %删除a变量中最后一个#!右边的字符,包含#!。
                        结果：http://nkweb-a3.huawei.com/#!pm/
    ${a%%#!*}   ->  %%删除a变量中第一个#!右边的字符,包含#!。
                        结果：http://nkweb-a3.huawei.com/
    ${a:3:2}    ->  下标开始0,从下标为3的字符开始截取2位字符。
                        结果：p:
    ${a:3}      ->  下标开始0,从下标为3的字符开始截取到结束。
                        结果：p://nkweb-a3.huawei.com/#!pm/#!pi/apply/searchContract.html
    ${a:0-7:3}  ->  从右边第7个字符开始截取3位。右边下标可以按从1开始算起。
                        结果：ct.
    ${a:0-7}    ->  从右边第7个字符开始截取到结束。
                        结果ct.html
-------------------------------------------------------
let 表达式
    a=0;
    let a++;
-------------------------------------------------------
expr 表达式：使用`包裹
    `expr index ${a}` 达 ->  使用expr index 表达式,获取a变量中达字符的下标位置。
    `expr 5 + 6`    ->  计算5+6 运算符需要空格隔开,
                        不然会直接输出 `expr 5 \* 6`某些运算符需要\转义
-------------------------------------------------------
数组:
    a=(1 2 3)   ->  申明并赋值
    ${a[1]}     ->  读取
    ${a[*]}或${a[@]} ->  读取所有
    ${#a[*]}或${#a[@]}   ->  读取数组长度
-------------------------------------------------------
循环：可以使用break;contiue;
    a=(你你你 我我我 我踏踏等等)
    for循环：
        for i in ${a[*]}; do
            echo ${i};
        done;
    ---------------------------
    while循环：
    j=0;
    while [ $j -lt ${#a[*]} ]; do
        echo ${a[$j]};
        let j++;
    done
    ---------------------------
    无限循环：
        while :
        do
            xxx
        done
    ---------------------------
    until循环:
        until [$a -gt 100]; do
            echo ""
        done
-------------------------------------------------------
条件判断：[]内位判断条件,需要前后需要空格。当使用&&,||等符号时使用[[]]。
    if [[ $a == $b ]]; then
        echo "";
    elif [[ $a != $b ]]; then
        echo "";
    else
        echo "";
    fi
    ------------------------------
    -z 检测字符长度是否为0
    -n 检测字符长度是否不为0
    $a 直接使用可以检测字符是否不为空
----------------------------------------------------------
case语句：*) 等于 default。;; 等于 break;
 case 条件 in
     匹配1) 操作;;
     匹配2) 操作;;
     *) 操作;;
 esac
---------------------------------------------------------
函数：
    function a(){
        echo "$1";
        return "aaa";
    }
    a 1 2 3;    ->  使用函数和传参空格隔开。
    -----------------------------------------------------
    内部获取参数：
    $0  ->  获取程序名
    $N  ->  获取第N个参数
    $#  ->  获取参数总数
    $*  ->  传递给程序的所有参数组成字符串
    $?  ->  Shell 程序在 Shell 中退出的情况，正常退出返回0，反之为1
    $$  ->  脚本运行的进程号
    $!  ->  后台最后运行的程序进程号
----------------------------------------------------------
文件判断：
    if [[ -d "./a.sh" ]]; then
        echo "";
    else
        echo "";
    fi;
    ------------------------------------------------------
    -d  ->  是否文件夹
    -f  ->  是否普通文件
    -r  ->  文件是否只读
    -w  ->  文件是否可写
    -x  ->  文件是否可执行
    -s  ->  文件是否不为空
    -e  ->  文件是否存在
----------------------------------------------------------
获取键盘输入：
    read -p "input a value：" a     -> 输入值并保存到a变量。
    -p     ->  设置提示信息
    -n N   ->  限制输入N位字符（达到N位后自动结束）
    -t T   ->  限制输入的时间,单位s
    -s     ->  隐藏输入的内容
----------------------------------------------------------
授权：
    chmod +x a.sh 将脚本设置为可执行权限
---------------------------------------------------------
重定向
 echo "aaa" > a.txt     ->  输出到a.txt文件
 ls -l >> a.txt         ->  输出追加到a.txt文件
 ls > /dev/null         ->  特殊：将内容输出到/dev/null,文件不会存在,起到禁止输出的效果
---------------------------------------------------------
引入别的sh:
    source sh脚本路径
    . 脚本路径