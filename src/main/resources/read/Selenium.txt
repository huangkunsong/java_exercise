基本使用：
    System.setProperty("webdriver.chrome.driver", "chromedriver.exe");
    WebDriver driver = new ChromeDriver();
    driver.manage().timeouts().pageLoadTimeout(2, TimeUnit.SECONDS);
    driver.get("www.baidu.com");
    driver.findElement(By.id("kw")).sendKeys("AAAAA");
    driver.quit();

//获取当前的title 和url
    driver.getTitle();
    driver.getCurrentUrl();

Element
    getSize() 返回元素的尺寸。
    getText() 获取元素的文本。
    getAttribute(name) 获得属性值。
    isDisplayed()  设置该元素是否用户可见。

navigate
    前进、后退
    driver.navigate().back();
    driver.navigate().forward();
    控制浏览器大小
    driver.manage().window().setSize(new Dimension(480, 800));
    //刷新
    driver.navigate().refresh();

Actions 类提供了鼠标操作的常用方法：
    contextClick() 右击
    clickAndHold() 鼠标悬停
    doubleClick() 双击
    dragAndDrop() 拖动
    release() 释放鼠标
    perform() 执行所有Actions 中存储的行为
    moveToElement  鼠标移动到指定元素上
    demo：
        //右键
        Actions action = new Actions(driver);
        action.contextClick(driver.findElement(By.id("su"))).perform();
        // 鼠标拖拽动作，将source 元素拖放到target 元素的位置。
        WebElement source = driver.findElement(By.name("element"));
        WebElement target = driver.findElement(By.name("element"));
        action.dragAndDrop(source,target).perform();

        // 释放鼠标
        Actions action = new Actions(driver);
        action.release().perform();

键盘事件，Keys类有所有key
    //删除多输入的一个m
    input.sendKeys(Keys.BACK_SPACE);
    //ctrl+a 全选输入框内容
    input.sendKeys(Keys.CONTROL,"a");
设置元素等待
    WebDriver 提供了几种方法来等待元素。
    implicitlyWait：识别对象时的超时时间。过了这个时间如果对象还没找到的话就会抛出NoSuchElement 异常。
    setScriptTimeout：异步脚本的超时时间。WebDriver 可以异步执行脚本，这个是设置异步执行脚本脚本返回结果的超时时间。
    pageLoadTimeout：页面加载时的超时时间。因为WebDriver 会等页面加载完毕再进行后面的操作，所以如果页面超过设置时间依然没有加载完成，那么WebDriver 就会抛出异常。
    Demo：
        //页面加载超时时间设置为5s
        driver.manage().timeouts().pageLoadTimeout(5, TimeUnit.SECONDS);
        driver.get("http://www.baidu.com/");
        //定位对象时给10s 的时间, 如果10s 内还定位不到则抛出异常
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        driver.findElement(By.id("kw33")).sendKeys("selenium");
        //异步脚本的超时时间设置成3s
        driver.manage().timeouts().setScriptTimeout(3, TimeUnit.SECONDS);

多表单切换
    切换ifream
        //切换到iframe（id = "if"）
        driver.switchTo().frame("if");
        //无id时,先获得元素在切换
        WebElement xf = driver.findElement(By.xpath("//iframe[@id='if']"));
        driver.switchTo().frame(xf);
        //退回上一级表单
        driver.switchTo().defaultContent();
    切换window（先获得句柄,在切换窗口）
        switchTo().window()
        //获得当前窗口句柄
        String windowFlag = driver.getWindowHandle();
        //跳转window
        driver.switchTo().window(windowFlag);
        //获得所有窗口句柄
        Set handles = driver.getWindowHandles();
        //关闭窗口
        driver.close();

保存页面截图：
         File srcFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
         FileUtils.copyFile(srcFile,new File("d:\\screenshot.png"));

警告框处理：switch_to_alert()
    getText()：返回alert/confirm/prompt 中的文字信息。
    accept()： 接受现有警告框。
    dismiss()：解散现有警告框。
    sendKeys(keysToSend)： 发送文本至警告框。keysToSend：将文本发送至警告框。
    Demo:
        //接收弹窗
        driver.switchTo().alert().accept();
操作Cookie
    getCookies() 获得所有cookie 信息。
    getCookieNamed(String name) 返回字典的key 为“name”的cookie 信息。
    addCookie(cookie dict) 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值。
    deleteCookieNamed(String name) 删除cookie 信息。“name”是要删除的cookie 的名称；“optionsString”是该cookie 的选项，目前支持的选项包括“路径”，“域”。
    deleteAllCookies() 删除所有cookie 信息。
执行javascript代码
    ((JavascriptExecutor)driver).executeScript("window.scrollTo(100,450);");







