六大原则
    单一职责：
        一个类只负责一项职责,如负责2项职责,职责1的改变就有可能导致职责2的故障。
    里氏替换：
        父类出现的地方都可以使用子类直接替换且不会产生负作用,子类尽量不要重写父类方法。
    依赖倒转：
        高层模块不应该依赖低层模块,两者都应该依赖其抽象,抽象不应该依赖细节,细节应该依赖抽象。
        面向接口或抽象类编程。
    接口隔离原则：
        客户端不应该依赖它不需要的接口;一个类对另一个类的依赖应该建立在最小的接口上。
        一个类依赖了接口,就需要实现接口中的所有方法,但如果有很多方法是不需要的,应该将原有的接口拆分成2个,只实现需要的。
    迪米特法则：
        一个类应该对其他对象保持最少的了解。一个类对自己的依赖知道的越少越好。
        被依赖类的内部逻辑应该封装(private)在类的内容,只对外(public)提供需要方法。
    开闭原则：
        一个类应该对拓展是开放的,对修改是封闭的。用抽象架构框架,用实现扩展细节。
        软件变化应该通过扩展实体的行为来实现变化,而不是通过修改已有代码来实现变化。

创建型(提供一种在创建对象的同时隐藏创建的逻辑的方式,而不是直接使用new运算符直接实例化对象)：
    简单工厂、工厂方法、抽象工厂、建造者、原型、单例
结构型(关注类和对象的组合,使用继承或实现组合对象来获取新的功能)：
    适配器、桥接、组合、装饰器、享元、代理、过滤器、外观
行为型(关注对象直接的通信)：
    责任链、命令、解释器、迭代器、中介、备忘录、观察者、状态模式、空对象、策略、模板、访问者
J2EE
    MVC、业务代表、组合实体、数据访问对象、前台控制器、拦截过滤器、服务定位器、传输对象
