redis优点：
  所有数据保存在内存中,响应速度快
  非阻塞IO,使用epoll作为I/O多路复用技术的实现
  单线程避免了线程切换和竞态产生的消耗。
redis缺点：
  单线程导致：某个命令执行过长，会造成其他命令的阻塞。


redis-server /configPath
 stop 停止
 start 启动
 restart 重启
 --test-memory 1024  用来测试系统是否有足够内容分配中给redis

redis-cli
redis-cli
  -h host
  -p port
  -a password
  -r 重复次数
  -i 间隔时间
  -shutdown [save|nosave] 停止redis,生成持久化文件
  -x 获取标准输入读取数据作为最后一个参数
  -c 链接Redis-Cluster
  --scan/--pattern  相当于scan
  --slave 把当前客户端模拟成Redis从节点,用来获取当前Redis的更新操作
  --rdb 请求当前Redis生成RDB持久文件,保存在本地。可以使用来做定期持久化
  --pipe
  --bigkeys 使用scan对Redis key进行扫描,获取内存占用比较大的键值
  --eval 运行指定Lua脚本
  --latency 用来检测网络延迟
  --latency-history 间隔15S输出一条记录
  --latency-dist 用图表形式显示
  --stat  实时获取Redis的重要统计信息,如：key数量,使用内存,客户端数量,阻塞数量,链接数量等
  --no-raw 要求返回结果为原始格式(默认)
  --raw 返回格式化的结果


redis-benchmark 性能测试
  -c 客户端数量
  -n 执行命令数量
  -q 结果只显示执行时间
  -r 控制命令生成keys数量
  -t 指定测试命令, -t get,set
  -p 每个请求pipeline的数据量
  -k 指定客户端是否使用keepalive,1为使用(默认)
  --csv 结果按照csv格式输出



redis key 命令规范：
业务场景名:对象名:id[属性]，适当减少key长度,避免内存浪费,加快获取


=====================================================================================
全局命令
keys * 查询所有key,支持pattern匹配。复杂度：O(n),数据库存在大量key时会阻塞
    pattern:
        *：匹配任意字符
        .：匹配一个字符
        []：匹配部分字符,[a,b]匹配a,b  [1-10] 匹配1到10
        \x：用来转译,匹配* ? 需要进行转译
scan cursor [match pattern] [count number]
          渐进式遍历key,返回2个值,一个是下次游标的位置,一个是遍历的key
    cursor：一个游标值,表明下次开始遍历的位置,起始位置为0,遍历结束游标为0
    [match pattern]： 匹配模式,和keys使用一致
    [count number]：每次遍历的key数量,默认10
    hash,set,zset都提供对应的渐进式遍历
    hscan、sscan、zscan，使用方式一致


dbsize 查看key总数,不会遍历所有key,直接取内部变量。复杂度：O(1)
exists key1 [key2] 检查键是否存在,支持查询多个,返回存在的个数
del key [key] 删除key，返回成功删除的个数,不存在返回0
expire key 10 设置key的过期时间,单位s.
              内部执行的还是pexpireat key不存在返回0,过期时间为负数则直接删除key
              set命令会导致过期时间失效
expireat key time  设置key在秒级时间戳过期。
pexpire key time  设置key的过期时间,单位ms。
pexpireat key time 设置key在毫秒级时间戳过期。
persist key   清除key的过期时间

ttl key 返回key的过期时间,-1：未设置过期时间,-2：key不存在
type key 获取key的数据结构,key不存在返回none
object encoding key 查看key的内部编码
rename key newkey key重命名,新key如果存在会进行覆盖。会删除就旧的key,key值多会导致堵塞
renamenx key newkey 使用同上,只有key不存在才进行
randomkey 随机返回一个key


迁移键：
  move key db ： redis内部有多个数据库,从源数据库迁移到目标数据库(功能很少使用)
  dump+restore：  非原则性操作,会在源端和目标端开启2条连接
    dump key：在源数据库执行,会将key的value进行序列化,采用RDB格式。
    resotre key ttl value：在目标数据库将上面序列化的值进行复原,ttl设置过去时间,0为不设置。
  migrate：dump+restore+del 结合,原则性操作,是Redis Cluster实现水平扩容的重要工具
          在源端和目标端开启一条连接进行,目标端完成restore后发送ok给源端,
          源端再根据migrate参数决定是否删除key
     migreate host port key|"" dbIndex timeout [copy] [replace] [keys key [key]]
          host,port：目标端host和端口
          key|""  单个key时直接写,多个key时写"",后面通过keys 指定
          dbIndex ：指定目标端数据库索引,一般都为0
          copy：添加此项迁移后不会删除key
          replace：覆盖目标端重复的key。否则目标端存在会报错
          keys 指定同步的key
          auth 目标库密码

数据备份：
select index ：切换数据库,redis默认有16个数据库,默认使用0
save
flushdb：清除当前数据库
flushall： 清除所有数据库,重启后
shutdown：

=====================================================================================
数据结构                  内部编码（默认大小可以调整）
string(字节长度)          int(8),
                         embstr(小于39),
                         raw(大于39)
hash(field个数)           ziplist(field小于512个,所有value小于64bit)
                         hashtable(消耗更多内存)
list(值个数)              老版本：ziplist(值个数小于512个且所有值小于64bit),
                         老版本：linkedlist(内部每个value需要维护prev和next指针且每个元素内存单独分配,增加内存碎片)
                         3.2版本后都使用
                         quicklist
                            (ziplist和linkedlist混合,将linkedlist分段保存,每段保存一个ziplist)
                            (多个ziplist用prev和next指针相连,每个ziplist默认存储8kb数据)
                            (通过list-max-ziplist-size设置每个ziplist存储大小,正数按个数存储,负数按kb存储)
                            (通过list-compress-depth,设置压缩深度,0表示不压缩(默认) 1表示2端各有一个节点不压缩,中间的都压缩)

set                      intset(集合内元素都是int且个数小于512,set-maxintset-entries设置)
                         hashtable
zset(有序集合)            ziplist(默认128个(zset-max-ziplistentries)且小于64bit(zset-max-ziplist-value))
                         skiplist
Bitmaps（位图）
HyperLogLog、GEO（地理信息定位）

=====================================================================================
字符串（最大不能超过512MB）操作：
set key value [ex seconds] [px milliseconds] [nx | xx] 添加key，失败返回(nil)
  ex 设置秒过期时间
  px 设置毫秒过期时间
  nx key必须不存在才可以设置,做更新动作
  xx key必须存在才可以设置
setex key seconds value  和 xx左右一致
setnx key value 和nx作用一致.
  setex,setnx 可以作为分布式锁的一种实现方案
get key 获取值
mset key value [key value] 批量设置值
mget key [key] 批量按顺序获取值,不存在的key值为(nil)
  mset,mget减少多次网络请求及等待处理时间,提高效率

incr key 自增1,返回自增后的值,key不存时,按照值为0开始自增,返回1。key不是整型报错。
decr key 自减,规则同incr
incrby key value 自增指定数值
decrby key value 自减指定数值
incrbyflaot 自增指定浮点数(不准确)
append key value 对指定key的值进行追加,返回value长度。key不存在为新增
strlen key 返回指定key的value值长度
getset key value 设置并返回旧值
setrange key offeset value  设置指定位置字符串
getrange key start end 获取部分字符串

字符串使用场景：
    缓存功能
    计算功能：如,点赞数量
    共享session
    限速：如限制操作指定时间内的次数
      key = "shortMsg:limit:" + phoneNum;
      isExists = redis.set(key,1,"EX 60","NX");
      if(isExists != null || redis.incr(key) <=5){通过} else {限制}

=====================================================================================
Hash
hset key field value 设置hash键值对
  hset user:1 name rookie
  hset user:1 age 10
hsetnx key field value 指定field不存在时设置,成功返回1,失败返回0
hget key field 获取值,不存在返回(nil)
hdel key field [field] 删除指定field
hmset key field value [field value] 批量设置
hmget key field [field] 批量获取
hexists key field 判断指定field是否存在
hkeys key  获取所有field
hvals key  获取所有value
hgetall key 获取所有field-value
hincryby key field value 对指定field自增指定数值
hincrbyfloat 同上,不准
hstrlen key field 获取指定field长度

使用场景：
    存储对象数据，比存储json串的string类型使用方便

=====================================================================================
List（一个列表最多存储2^32-1,与JS一致）
lpushx key value [value] 只有key存在才插入
lpush key value [value] 左边插入,插入多个时为倒叙,成功返回list长度
rpush key value [value] 右边插入
linsert key before|after item value 在指定元素item之前或之后插入元素,
                                    从list左边开始查询item,以第一个找到的为准
                                    成功返回list长度,失败返回-1
lpop key  左边删除,返回删除的元素
rpop key  右边删除
lindex key index 获取指定下标的值,支持负数查询
lrange key startIndex endIndex 获取元素下标startIndex到endIndex元素（包含endIndex）
                                以0开始,-1为最后一个元素,-2为倒数第二
llen key 查询list长度
lset key index value 修改指定下标的值
lrem key count value 从列表中找到等于value的元素进行删除,count指定删除个数和方向
  count > 0 从左到右删除count个等于value的元素
  count < 0 从右到左删除count个等于value的元素
  count = 0 删除所有等于value的元素
  返回删除的个数
ltrim key startIndex endIndex 对列表进行裁剪
  ltrim list 2 5  保留下标2到5的元素
blpop/brpop key [key] tiemout
   阻塞删除,如果list中存在指定元素则直接删除,并返回删除的元素
   如果list为空则等待timeout时间(单位s),等待list中有元素后删除返回
   超过timeout时间则返回(nil),timeout=0 为一直等待
   只会阻塞当前客户端,不会阻塞其他命令执行
   多个客户端对同个key执行阻塞删除时,按顺序释放
   实现消息队列的基本。

使用场景：
    lpush+lpop=Stack（栈）
    lpush+rpop=Queue（队列）
    lpsh+ltrim=Capped Collection（有限集合）
    lpush+brpop=Message Queue（消息队列）
    存储列表数据,分页查询等

=====================================================================================
Set（无序集合,一个集合最多存储2^32-1,可对多个集合进行交集,并集,差集）
sadd key value [value] 添加值,返回添加成功的个数
srem key value [value] 删除值,返回成功删除的个数
scard key 返回集合大小
sismember key value 判断元素是否在集合内,存在：1,不存在：0
srandmember key count 随机返回指定个数key,count不写默认为1
spop key count 随机删除count个元素,count不写默认为1,返回删除的元素,无元素返回(nil)
smembers key 返回集合所有元素
sinter key1 key2 [key] 获取N个集合中的交集
sunion key1 key2 [key] 获取N个集合中的并集
sdiff key1 key2 [key]  获取key1和后面所有key的差集
sinterstore storekey key1 key [key] 将交集结果保存到storekey,会覆盖原有storekey的内容,返回保存的个数
sunionstore 用法同上
sdiffstore 用法同上

使用场景：
    给标签添加用户,给用户打标签：保存用户感兴趣类型,可以计算出对同一标签感兴趣的人,以及共同喜好


=====================================================================================
zset（有序集合）
zadd key [nx|xx] [ch|incr] score value [score value] 添加元素,返回添加的元素个数
      已存在的元素进行add,只会修改score,返回时不记录个数
      ch 返回受影响的元素和score方式变化的个数
      incr 对指定元素做score增加value,元素不存在为新增
zcred key 返回集合大小
zscore key member 获取指定元素的score
zrank key member 返回指定元素排名
zrevrank key member 返回指定元素倒叙排名
zrem key member [member] 删除元素,返回删除个数
zincrby key increment member 对指定元素的score增加increment,支持负数,返回更新后的score
zrange key startIndex endIndex [withscores]   返回指定排名内的元素,withscores同时返回score
zrevrange 用法同上,倒叙
zrangebyscore key min max [withscores] [limit offset count] 返回指定分数范围内的元素
  区间：(符号
      获取大于：大于等于100且小于等于500的元素
        zrangebyscore key 100 500
      获取大于100且小于等于500的元素
        zrangebyscore key (100 500
      获取大于100且小于500的元素
        zrangebyscore key (100 (500
  无限：-inf表示无限小,+inf 表示无限大
  限制：获取500-100间的第一位到第三位
      zrangebyscore key 500 1000 withscore limit 1 3
zrevrangebyscore key max min [withscores] 按照score倒序,用法同上
zcount key min max 返回指定score区间内的key个数,支持无限和区间
zremrangebyrank key startIndex endIndex 删除指定排名内的元素(包括endIndex),返回删除的个数
zremrangebyscores key min max 删除指定score范围内的元素,返回删除的个数
zinterstore storeName keyNumber key1 key2 [key] [weight [weight]] [aggregate [sum|minx|max]]
      storeName： 保存结果集的key
      keyNumber： 进行运算的key总数
      weight key：指定每个key的score的权重
      aggregate [sum|minx|max]：score取值方式,默认是sum
zunionstore 并集操作,使用同上

使用场景：
    展示获取赞数最多的十个用户

=====================================================================================
慢查询：
  命令耗时：发送命令->命令排队->执行命令->返回结果
  慢查询只统计执行命令时间
  slowlog-log-slower-than：设置记录阈值,单位微秒.默认：0.001s
                           设置为：0,会记录所有命令,小于0,所有都不记录
  slowlog-max-len：设置最多记录条数,默认128
slowlog get [n]  获取慢查询日志
  1：日志标识
  2：时间戳
  3：耗时
  4：执行的命令和参数
  5：执行的客户端ip和端口号
  6：客户端名称
slowlog len 获取慢查询日志大小
slowlog reset 清空慢日志
=====================================================================================
pipeline 将要执行的多条命令一次性发送执行
原生批量命令和Pipeline对比：
  原生批量命令          pipeline
  原子性的,            非原子性
  单命令               多命令
  服务端支持            服务端和客户端共同实现

=====================================================================================
事务
multi  开启事务
exec   提交事务
watch key [key] 开启事务前,指定监视key,未发生变化事务才执行成功

=====================================================================================
Lua
eval scriptcontent keynumber ...key    执行Lua
evalsha sha1  执行指定sha1内容

script load 'content'  加载Lua内容,得到Sha1
script exists sha1 判断是否存在
script flush     清空加载的lua脚本
script kill      杀掉执行的Lua脚本,Lua正在执行写入时不生效。




在Lua中执行redis命令
redis.call("set","a", "aaaa");
redis.call("get","a");
redis.call出错会中断执行
redis.pcall出错会继续执行。

Redis中Lua脚本好处：
原子性,减少网络开销



=====================================================================================
配置管理
config set [key] [value] 设置配置项
config get [key] 获取配置项
config rewrite 持久化配置项


=====================================================================================
客户端命令：
client [set/get]name 设置获取客户端名称
client list 列出所有客户端

